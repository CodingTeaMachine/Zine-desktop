@page "/Library/{GroupId:int}"

@using Microsoft.IdentityModel.Tokens
@using Zine.App
@using Zine.App.Domain.ComicBook
@using Zine.App.Domain.ComicBook.DTO
@using Zine.App.Domain.ComicBook.Import
@using Zine.App.Domain.Group
@using Zine.App.Domain.Group.DTO
@using Zine.App.Exceptions
@using Zine.App.Helpers
@using Zine.App.Pages.Library
@using Zine.Assets.Icons
@using Zine.Components.Components.Library
@using Page = Zine.App.Enums.Page
@using Zine.Components.Components.General.InfoDrawer

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IComicBookService ComicBookService
@inject IComicBookImportService ComicBookImportService

<InfoDrawer />

<div class="mx-5">

	@* Navigation *@
	<MudLink class="flex items-center w-fit mb-4" Href="#" Disabled="GroupId == AppConstants.MainGroupId" OnClick="NavigateToParentGroup">
		<MudIcon Icon="@Icons.Material.Filled.ChevronLeft" Color="GroupId == AppConstants.MainGroupId ? Color.Surface : Color.Primary" />
		<p class="pt-0.5">Back</p>
	</MudLink>

	@* Action row with import and create directory *@
	<div class="grid grid-cols-3 items-center mb-4">

		<div class="flex items-center gap-3">
			<CreateGroupButton CreateGroup="@CreateGroup" />
			<ImportComicButton Import="@Import" />
		</div>

		<h2 class="text-2xl font-bold justify-self-center tracking-wider">
			@(_currentGroup != null ? _currentGroup.Name : "Library")
		</h2>

	</div>

	@* Search bar *@
	<SearchRow OnSearchUpdated="@Search"/>

	@* Group and card grid display *@
	<MudDropContainer
		@ref="_dropContainer"
		T="DropItem"
		Items="_comicBookList"
		ItemsSelector="(item, dropzone) => item.Identifier == dropzone"
		ItemDropped="ComicBookDropped">

		<ChildContent>
			<MudListSubheader class="text-xl mb-3 px-0">Groups</MudListSubheader>
			<MudGrid class="mx-auto gap-6 px-5" Justify="Justify.FlexStart">
				@foreach (var group in _groupList)
				{
					<MudDropZone T="DropItem" OnlyZone="true" CanDropClass="outline outline-primary outline-offset-4 duration-75" Class="rounded-lg" Identifier="@GetGroupIdentifier(group.Id)">
						<div class="cursor-pointer" @onclick="() => NavigateToGroup(group.Id)">
							<GroupCard
								GroupService="GroupService"
								ComicBookService="ComicBookService"
								Group="group"
								Groups="_contextMenuGroups"
								ContextMenuDisabled="_editingInProgress"
								UpdatedGroup="@LoadCurrentGroup"
								EditStateChanged="newState => _editingInProgress = newState" />
						</div>
					</MudDropZone>
				}
			</MudGrid>

			<MudListSubheader class="text-xl mt-10 px-0">Comic Books</MudListSubheader>
			<div class="flex flex-wrap flex-grow mx-auto gap-6 px-5">
				@if (_comicBookList.Any())
				{
					@foreach (var dropItem in _comicBookList)
					{
						<MudDropZone
							T="DropItem"
							CanDropClass="outline outline-primary outline-offset-4 duration-75"
							Class="rounded-lg"
							CanDrop="@((item) => !item.Identifier.Equals(GetComicBookIdentifier(dropItem.ComicBook.Id)))"
							Identifier="@GetComicBookIdentifier(dropItem.ComicBook.Id)">

							<ChildContent>
								<MudDynamicDropItem
									T="DropItem"
									Item="dropItem"
									Disabled="dropItem.ComicBook.Information.FileMovedOrDeleted"
									DraggingClass="dragging-item outline outline-offset-8 outline-2 outline-primary rounded-lg"
									@onclick="() => OpenComicBook(dropItem.ComicBook)">

									<ComicBookCard
										GroupService="GroupService"
										ComicBookService="ComicBookService"
										ComicBook="@dropItem.ComicBook"
										Groups="_contextMenuGroups"
										ContextMenuDisabled="_editingInProgress"
										UpdatedComicBook="@LoadCurrentGroup"
										EditStateChanged="newState => _editingInProgress = newState" />

								</MudDynamicDropItem>

							</ChildContent>
						</MudDropZone>
					}
				}
				else
				{
					<div class="flex flex-col justify-center align-center gap-5 mx-auto">
						<div class="flex justify-center align-center gap-3">
							<MudIcon Icon="@CustomIcons.ComicBookNotFound" Size="Size.Large" Color="Color.Primary" />
							<span> No comic books found</span>
						</div>
						<ImportComicButton Import="@Import" />
					</div>
				}
			</div>
		</ChildContent>
	</MudDropContainer>
</div>

@code

{
	[Parameter]
	public int GroupId { get; set; }

	[Inject]
	IGroupService GroupService { get; set; } = null!;

	MudDropContainer<DropItem>? _dropContainer;

	bool _editingInProgress = false;
	private const string ComicBookDropZoneIdentifier = "ComicBook";

	Group? _currentGroup;

	List<DropItem> _comicBookList = [];
	List<Group> _groupList = [];
	List<Group> _contextMenuGroups = [];


	private void Search(ComicBookSearchDto search)
	{
		var allSearchKeysAreNull = search.AllKeysAreNullOrEmpty();

		if (allSearchKeysAreNull)
		{
			LoadCurrentGroup();
			ReloadDropzone();
			StateHasChanged();
			return;
		}


		try
		{
			_comicBookList = ComicBookService
				.Search(search)
				.Select(book => new DropItem { ComicBook = book, Identifier = ComicBookDropZoneIdentifier })
				.ToList();

			if (!search.Title.IsNullOrEmpty())
			{
				var groupSearchDto = new GroupSearchDto
				{
					Name = search.Title,
				};

				_groupList = GroupService.Search(groupSearchDto).ToList();
			}

			_contextMenuGroups = GroupService.List().ToList();

			StateHasChanged();

		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}


		ReloadDropzone();
	}

	private async Task Import(ImportAction action)
	{
		var dialogOptions = new DialogOptions
		{
			CloseOnEscapeKey = false,
			BackdropClick = false,
			CloseButton = false
		};
		var dialog = await DialogService.ShowAsync<ImportProgressDialog>("", dialogOptions);

		try
		{
			ComicBookImportService!.ImportFromDisk(action, GroupId);
			dialog.Close();
			Snackbar.Add("Successfully imported comic books.", Severity.Success);
			LoadCurrentGroup();
		}
		catch (Exception e) when (e is ArgumentOutOfRangeException or FormatException or DirectoryNotFoundException)
		{
			dialog.Close();
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	private void CreateGroup(string newGroupName)
	{
		GroupService.Create(newGroupName, GroupId);
		LoadCurrentGroup();
	}


	private async Task ComicBookDropped(MudItemDropInfo<DropItem> dropItem)
	{
		if (dropItem.Item!.Identifier.Equals(dropItem.DropzoneIdentifier))
			return;

		var dropzoneData = dropItem.DropzoneIdentifier.Split(" ");
		var dropDestinationType = dropzoneData[0];
		var dropDestinationId = int.Parse(dropzoneData[1]);

		var isDroppedToAGroupCard = dropDestinationType.Equals("Group");


		if (isDroppedToAGroupCard)
		{
			DroppedToGroupCardAction(dropDestinationId, dropItem.Item.ComicBook.Id);
		}
		else
			await DroppedToComicBookCardAction(dropDestinationId, dropItem.Item.ComicBook.Id);
	}

	private void DroppedToGroupCardAction(int groupId, int comicBookId)
	{
		try
		{
			ComicBookService.AddToGroup(groupId, comicBookId);
			LoadCurrentGroup();
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}
		catch (Exception)
		{
			Snackbar.Add("Could not add comic book to group", Severity.Error);
		}
	}

	private async Task DroppedToComicBookCardAction(int destinationComicBookId, int draggedComicBookId)
	{
		var options = new DialogOptions { CloseOnEscapeKey = true };
		var dialogReference = await DialogService.ShowAsync<CreateGroupDialog>("Create new group", options);
		var result = await dialogReference.Result;


		if (result?.Canceled is true || result?.Data is null)
			return;

		try
		{
			var createdGroup = GroupService.Create(result.Data.ToString()!, GroupId);
			ComicBookService.AddToGroup(createdGroup.Id, destinationComicBookId);
			ComicBookService.AddToGroup(createdGroup.Id, draggedComicBookId);

			LoadCurrentGroup();
			StateHasChanged();
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}
		catch (Exception)
		{
			Snackbar.Add("Error creating group from comic books", Severity.Error);
		}
	}


	private void NavigateToParentGroup()
	{
		var parentGroupId = GroupService.GetById(GroupId).ParentGroupId;

		if (parentGroupId != null)
			NavigateToGroup(parentGroupId.Value);
	}

	private void NavigateToGroup(int groupId)
	{
		if (!_editingInProgress)
			NavigationManager.NavigateTo(PageManager.GetLibraryGroupLink(groupId), true);
	}

	private void LoadCurrentGroup()
	{
		try
		{
			_currentGroup = GroupService.LoadForLibraryPage(GroupId);
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
			return;
		}

		_groupList = _currentGroup!.ChildGroups.ToList();
		_contextMenuGroups = _groupList;


		_comicBookList = [];
		_comicBookList = _currentGroup.ComicBooks
			.Select(cb => new DropItem { ComicBook = cb, Identifier = GetComicBookIdentifier(cb.Id) })
			.ToList();

		ReloadDropzone();
	}

	private string GetComicBookIdentifier(int identifier)
	{
		return "ComicBook " + identifier;
	}

	private string GetGroupIdentifier(int identifier)
	{
		return "Group " + identifier;
	}

	private void OpenComicBook(ComicBook comicBook)
	{
		if(comicBook.Information.FileMovedOrDeleted)
			return;

		var currentUri = NavigationManager.Uri;
		var readingPageLink = GetComicBookLink(comicBook.Id);

		readingPageLink.Query = $"ReturnTo={Uri.EscapeDataString(currentUri)}";

		NavigationManager.NavigateTo(readingPageLink.ToString());
	}



	/// <summary>
	/// The dropzone doesn't automatically update, when data updates
	/// The delay is needed to make sure the list has already updated
	/// </summary>
	private void ReloadDropzone()
	{
		Task.Delay(1).ContinueWith(_ => InvokeAsync(() => _dropContainer?.Refresh()));
	}


	private UriBuilder GetComicBookLink(int comicBookId)
	{
		var comicBookLink = PageManager.GetReadingPageLink(comicBookId, GroupId).Remove(0, 1);

		return new UriBuilder(NavigationManager.BaseUri + comicBookLink);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		PageManager.SetPageTitle(Page.Library);
		LoadCurrentGroup();
	}

}
