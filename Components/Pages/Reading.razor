@page "/Reading/{ComicBookId:int}/{GroupId:int}"
@layout ReadingLayout
@implements IJsKeyEventListener
@implements IJsScrollEventListener
@implements IDisposable
@using Zine.App.Domain.ComicBook
@using Zine.App.Domain.ComicBook.Reading
@using Zine.App.Helpers.JsHelpers
@using Zine.Components.Layout

@inject NavigationManager NavigationManager;
@inject IComicBookService ComicBookService
@inject IJSRuntime JsRuntime;

<script src="js/Reading.js"></script>

<div Class="px-5 py-5 h-[calc(100vh-64px)] w-full">
	@* Vertical images *@
	<div class="relative select-none">
		<MudDrawer Open="PageExplorerOpen" Variant="DrawerVariant.Persistent" ClipMode="DrawerClipMode.Always">
			<div>
				@foreach (var (pageIndex, image) in _readingPageHandler.Images.Select((image, index) => (index, image)))
				{
					<div id="image-@pageIndex" class="mb-2 mx-2 first:mt-2 last:mb-2 cursor-pointer @(_readingPageHandler.CurrentPageIndex == pageIndex ? "outline outline-offset-1 outline-primary" : "outline-0")">
						<MudImage
							Src="@image"
							@onclick="() => _readingPageHandler.GoToPage(pageIndex)" />
					</div>
				}
			</div>
		</MudDrawer>
	</div>

	<main class="h-full w-full flex flex-col gap-3">

		<div class="toolbar w-full h-10 bg-dark rounded-lg py-2 px-4 flex justify-end items-center leading-8">
			<div class="flex items-center gap-2 sm:gap-1">
				<MudIcon Icon="@Icons.Material.Filled.RotateRight" class="toolbar-icon" @onclick="_readingPageHandler.RotateRight"/>
				<MudIcon Icon="@Icons.Material.Filled.RotateLeft" class="toolbar-icon" @onclick="_readingPageHandler.RotateLeft"/>
			</div>

			<span class="bg-light mx-2 w-[1px] h-4/5"></span>

			<div class="flex items-center gap-2 sm:gap-1">
				<MudIcon Icon="@Icons.Material.Filled.ZoomIn" class="toolbar-icon" @onclick="_readingPageHandler.ZoomIn" />
				<MudIcon Icon="@Icons.Material.Filled.ZoomOut" class="toolbar-icon" @onclick="_readingPageHandler.ZoomOut" />

				<div class="ml-2 w-10 text-end">
					@_readingPageHandler.ZoomScale%
				</div>
			</div>

		</div>

		<div class="w-full h-full flex justify-center items-center overflow-hidden relative">
			<canvas id="@CanvasId" ></canvas>
		</div>

		<div class="h-14 w-full flex flex-row items-center justify-center gap-3 select-none">

			<MudIcon Class="cursor-pointer" Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" @onclick="_readingPageHandler.GoToFirstPage" />
			<MudIcon Class="cursor-pointer" Icon="@Icons.Material.Filled.KeyboardArrowLeft" @onclick="_readingPageHandler.PrevPage" />

			<div>@(_readingPageHandler.CurrentPageIndex + 1) / @_readingPageHandler.ComicBook.Information.NumberOfPages</div>

			<MudIcon Class="cursor-pointer" Icon="@Icons.Material.Filled.KeyboardArrowRight" @onclick="_readingPageHandler.NextPage" />
			<MudIcon Class="cursor-pointer" Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" @onclick="_readingPageHandler.GoToLastPage" />

		</div>
	</main>

</div>

@code {

	[Parameter]
	public int ComicBookId { get; set; }

	[Parameter]
	public int GroupId { get; set; }

	private const string CanvasId = "Canvas";

	const bool PageExplorerOpen = true;

	DotNetObjectReference<Reading>? _componentRef;

	ReadingPageHandler _readingPageHandler = null!;

	[JSInvokable]
	public void JS_OnKeyDown(KeyboardEventArgs keyboardEvent)
	{
		if (keyboardEvent.AltKey)
			HandleAltKeyPress(keyboardEvent);
		else
			HandleNormalKeyPress(keyboardEvent);
	}

	[JSInvokable]
	public void JS_ElementScrolledAsync(ScrollEvent scrollEvent)
	{
		if(scrollEvent.Modifier == KeyModifier.None)
			HandlePageChangeByScroll(scrollEvent.Direction);
	}

	[JSInvokable]
	public async void JS_UpdatePageZoomDisplay()
	{
		await _readingPageHandler.UpdateZoomScale();
		StateHasChanged();
	}

	void HandlePageChangeByScroll(ScrollDirection direction)
	{
		if(direction == ScrollDirection.Down)
			_readingPageHandler.NextPage();
		else
			_readingPageHandler.PrevPage();
	}

	void HandleNormalKeyPress(KeyboardEventArgs keyboardEvent)
	{
		switch (keyboardEvent.Key)
		{
			case "ArrowUp":
			case "ArrowLeft":
				_readingPageHandler.PrevPage();
				break;
			case "ArrowRight":
			case "ArrowDown":
				_readingPageHandler.NextPage();
				break;
		}
	}

	void HandleAltKeyPress(KeyboardEventArgs keyboardEvent)
	{
		switch (keyboardEvent.Key)
		{
			case "=":
				_ = _readingPageHandler.ZoomIn();
				break;
			case "-":
				_ = _readingPageHandler.ZoomOut();
				break;
		}
	}

	void InitReadingPageHandler(IComicBookService comicBookService)
	{
		_readingPageHandler = new ReadingPageHandler(
			NavigationManager,
			comicBookService,
			JsRuntime,
			CanvasId,
			GroupId,
			ComicBookId,
			StateHasChanged);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		InitReadingPageHandler(ComicBookService);
	}


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_componentRef = DotNetObjectReference.Create(this);

			_readingPageHandler.SetDotnetHelperReference(_componentRef);
			_readingPageHandler.RefreshCanvasImage();

			await JsRuntime.InvokeVoidAsync("JsFunctions.registerKeyDownEventListener", _componentRef);
			await JsRuntime.InvokeVoidAsync("JsFunctions.registerOnScrollListener", CanvasId, _componentRef, HandlerType.Async);
		}
	}

	public void Dispose()
	{
		_componentRef?.Dispose();
	}

}
