@page "/Library/{GroupId:int?}"
@using System.Text
@using Zine.App.Domain.ComicBook
@using Zine.App.Domain.Group
@using Zine.App.Enums
@using Zine.App.Helpers
@using Zine.Assets.Icons
@using Zine.Components.Components.Library
@using Page = Zine.App.Enums.Page

@inject NavigationManager NavigationManager


<MudLink class="flex items-center mx-5 w-fit" Href="#" Disabled="GroupId == null" OnClick="NavigateToParentGroup">
	<MudIcon Icon="@Icons.Material.Filled.ChevronLeft" Color="GroupId == null ? Color.Surface : Color.Primary" />
	<p class="pt-0.5">Back</p>
</MudLink>


@* Action row with import, create directory and search *@
<div class="flex justify-between items-center mb-4 mx-5">

	<div class="flex items-center gap-3">
		<CreateGroupButton CreateGroup="@CreateGroup" />
		<ImportComicButton Import="@Import" />
	</div>


	<MudTextField
		@bind-Value="@SearchWord"
		class="max-w-xs"
		Label="Search"
		Variant="Variant.Outlined"
		Clearable="true"
		Adornment="Adornment.Start"
		AdornmentIcon="@Icons.Material.Filled.Search"
		DebounceInterval="300"
		OnDebounceIntervalElapsed="SearchByTitle" />
</div>

<MudDropContainer @ref="_dropContainer" T="DropItem" Items="FilteredComicsList" ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)" ItemDropped="ComicBookDropEnd">
	<ChildContent>
		<MudListSubheader class="text-xl mb-3">Groups</MudListSubheader>
		<MudGrid class="mx-auto gap-6 px-10" Justify="Justify.FlexStart">
			@foreach (var group in FilteredGroupList)
			{
				<MudDropZone T="DropItem" OnlyZone="true" Identifier="@group.Id.ToString()">
					<div class="cursor-pointer" @onclick="() => NavigateToGroup(group.Id)">
						<GroupCard
							GroupService="GroupService"
							Group="@group"
							Groups="OriginalGroupList"
							ContextMenuDisabled="_editingInProgress"
							UpdatedGroup="@UpdatedComicBookOrGroup"
							EditStateChanged="newState => _editingInProgress = newState"
						/>
					</div>
				</MudDropZone>
			}
		</MudGrid>

		<MudListSubheader class="text-xl mt-10 ">Comic Books</MudListSubheader>
		<MudDropZone T="DropItem" Identifier="ComicBook" class="flex flex-wrap flex-grow mx-auto gap-6 px-10">
			<ChildContent>
				@if (FilteredComicsList.Any())
				{
					@foreach (var dropItem in FilteredComicsList)
					{
						<MudDynamicDropItem T="DropItem" Item="dropItem">
							<ComicBookCard
								GroupService="GroupService"
								ComicBookService="ComicBookService"
								ComicBook="@dropItem.ComicBook"
								Groups="OriginalGroupList"
								ContextMenuDisabled="_editingInProgress"
								UpdatedComicBook="@UpdatedComicBookOrGroup"
								EditStateChanged="newState => _editingInProgress = newState"
							/>
						</MudDynamicDropItem>
					}
				}
				else
				{
					<div class="flex flex-col justify-center align-center gap-5 mx-auto">
						<div class="flex justify-center align-center gap-3">
							<MudIcon Icon="@CustomIcons.ComicBookNotFound" Size="Size.Large" Color="Color.Primary" />
							<span> No comic books found</span>
						</div>
						<ImportComicButton Import="@Import" />
					</div>
				}

			</ChildContent>
		</MudDropZone>
	</ChildContent>

</MudDropContainer>

@code
{
	[Parameter]
	public int? GroupId { get; set; }

	[Inject]
	private ISnackbar Snackbar { get; set; } = null!;

	[Inject]
	private IComicBookService? ComicBookService { get; set; }

	[Inject]
	private IComicBookImportService? ComicBookImportService { get; set; }

	[Inject]
	private IGroupService? GroupService { get; set; }

	private class DropItem
	{
		public ComicBook ComicBook { get; init; } = null!;
		public string Identifier { get; set; } = null!;
	}

	MudDropContainer<DropItem>? _dropContainer;

	string SearchWord { get; set; } = "";
	bool _editingInProgress = false;
	List<DropItem> OriginalComicsList { get; set; } = [];
	List<DropItem> FilteredComicsList { get; set; } = [];
	List<Group> OriginalGroupList { get; set; } = [];
	List<Group> FilteredGroupList { get; set; } = [];

	private void SearchByTitle(string searchTerm)
	{
		var lowerCaseSearchTerm = searchTerm.ToLower();
		FilteredComicsList = OriginalComicsList.Where(comic => comic.ComicBook.Name.ToLower().Contains(lowerCaseSearchTerm)).ToList();
		FilteredGroupList = OriginalGroupList.Where(group => group.Name.ToLower().Contains(lowerCaseSearchTerm)).ToList();
		ReloadDropzone();
	}

	private void Import((ImportType importType, string path) args)
	{
		try
		{
			bool importSuccessful = ComicBookImportService!.ImportFromDisk(args.importType, args.path, GroupId);

			if (importSuccessful)
			{
				Snackbar.Add("Successfully imported comic books.", Severity.Success);
				LoadComics();
				ReloadDropzone();
			}
			else
				Snackbar.Add("An error occured during importing...", Severity.Error);
		}
		catch (ArgumentOutOfRangeException e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	private void CreateGroup(string newGroupName)
	{
		GroupService!.Create(newGroupName, GroupId);
		LoadGroups();
	}


	private void ComicBookDropEnd(MudItemDropInfo<DropItem> dropItem)
	{
		dropItem.Item!.Identifier = dropItem.DropzoneIdentifier;
		var isAddedToGroup = ComicBookService!.AddToGroup(int.Parse(dropItem.DropzoneIdentifier), dropItem.Item!.ComicBook.Id);

		if (isAddedToGroup)
		{
			LoadPage();
			ReloadDropzone();
		}
		else
			Snackbar.Add("Error adding comic to group", Severity.Error);

	}

	private void UpdatedComicBookOrGroup()
	{
		LoadPage();
		ReloadDropzone();
	}

	private void LoadPage()
	{
		OriginalGroupList = [];
		OriginalComicsList = [];
		LoadGroups();
		LoadComics();
	}

	private void LoadGroups()
	{
		SearchWord = "";
		FilteredGroupList = OriginalGroupList = GroupService!.GetAllByParentId(GroupId).ToList();
	}

	private void LoadComics()
	{
		SearchWord = "";
		FilteredComicsList = OriginalComicsList = ComicBookService!
			.GetAllByGroupId(GroupId)
			.Select(book => new DropItem { ComicBook = book, Identifier = "ComicBook" })
			.ToList();
	}

	private void NavigateToParentGroup()
	{
		if (GroupId == null) return;

		var parentGroupId = GroupService!.GetById(GroupId.Value)?.ParentGroupId;
		NavigateToGroup(parentGroupId);
	}

	private void NavigateToGroup(int? groupId)
	{
		if(!_editingInProgress)
			NavigationManager.NavigateTo(GetGroupLink(groupId), true);
	}


	/// <summary>
	/// The dropzone doesn't automatically update, when <c> FilteredComicsList </c> updates
	/// The delay is needed to make sure the list has already updated
	/// </summary>
	private void ReloadDropzone()
	{
		Task.Delay(1).ContinueWith(_ => InvokeAsync(() => _dropContainer?.Refresh()));
	}


	private string GetGroupLink(int? groupId)
	{
		var sb = new StringBuilder(Page.Library);

		if (groupId != null)
			sb.Append("/").Append(groupId);

		Console.WriteLine(sb.ToString());

		return sb.ToString();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		PageTitleManager.PageTitle = "Library";
		LoadPage();
	}
}
