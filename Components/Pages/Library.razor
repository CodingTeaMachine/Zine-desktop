@page "/Library"
@using Zine.App.Enums
@using Zine.App.Model.DB
@using Zine.App.Services
@using Zine.Window
@using Zine.Components.Components.Library

@* Action row with import, create directory and search *@
<div class="flex justify-between items-center mb-4">
	<div class="flex items-center gap-3">
		<CreateGroupButton CreateGroup="@CreateGroup" />

		<ImportComicButton Import="@Import" />
	</div>


	<MudTextField
		@bind-Value="@SearchWord"
		class="max-w-xs"
		Label="Search"
		Variant="Variant.Outlined"
		Clearable="true"
		Adornment="Adornment.Start"
		AdornmentIcon="@Icons.Material.Filled.Search"
		DebounceInterval="300"
		OnDebounceIntervalElapsed="SearchByTitle" />
</div>


<MudDropContainer T="DropItem" Items="FilteredComicsList" ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)" ItemDropped="ItemDropEnd">
	<ChildContent>
		<MudListSubheader class="text-xl mb-3">Groups</MudListSubheader>
		<MudGrid class="mx-auto gap-6 px-10" Justify="Justify.FlexStart">
			@foreach (var group in FilteredGroupList)
			{
				<MudDropZone T="DropItem" OnlyZone="true" Identifier="@group.Id.ToString()">
					<GroupCard Group="@group" />
				</MudDropZone>
			}
		</MudGrid>

		<MudListSubheader class="mt-10 text-xl">Comic Books</MudListSubheader>
		<MudDropZone T="DropItem" Identifier="ComicBook" class="flex flex-wrap flex-grow mx-auto gap-6 px-10" />
	</ChildContent>

	<ItemRenderer>
		<ComicBookCard ComicBook="@context.ComicBook" />
	</ItemRenderer>
</MudDropContainer>

@code
{
	[Inject]
	private ISnackbar? Snackbar { get; set; }

	[Inject]
	private IComicBookService? ComicBookService { get; set; }

	[Inject]
	private IGroupService? GroupService { get; set; }

	string SearchWord { get; set; } = "";
	List<DropItem> OriginalComicsList { get; set; } = [];
	List<DropItem> FilteredComicsList { get; set; } = [];
	List<Group> OriginalGroupList { get; set; } = [];
	List<Group> FilteredGroupList { get; set; } = [];

	protected void SearchByTitle(string searchTerm)
	{
		var lowerCaseSearchTerm = searchTerm.ToLower();
		FilteredComicsList = OriginalComicsList.Where(comic => comic.ComicBook.Name.ToLower().Contains(lowerCaseSearchTerm)).ToList();
		FilteredGroupList = OriginalGroupList.Where(group => group.Name.ToLower().Contains(lowerCaseSearchTerm)).ToList();
	}

	private void Import((ImportType importType, string path) args)
	{
		try
		{
			bool importSuccessful = ComicBookService!.ImportFromDisk(args.importType, args.path);

			if (!importSuccessful)
				Snackbar!.Add("An error occured during importing...", Severity.Error);
			else
			{
				Snackbar!.Add("Successfully imported comic books.", Severity.Success);
				LoadComics();
			}
		}
		catch (ArgumentOutOfRangeException e)
		{
			Snackbar!.Add(e.Message, Severity.Error);
		}
	}

	private void CreateGroup(string newGroupName)
	{
		GroupService!.Create(newGroupName);
		LoadGroups();
	}

	private void LoadGroups()
	{
		SearchWord = "";
		FilteredGroupList = OriginalGroupList = GroupService!.GetAllByParentId().ToList();
	}

	private void LoadComics()
	{
		SearchWord = "";
		FilteredComicsList = OriginalComicsList = ComicBookService!
			.GetAllByGroupId()
			.Select(book => new DropItem { ComicBook = book, Identifier = "ComicBook", })
			.ToList();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		PageTitleManager.PageTitle = "Library";
		LoadComics();
		LoadGroups();
	}

	private void ItemDropEnd(MudItemDropInfo<DropItem> dropItem)
	{
		//TODO: Implement dropping on other comic books
		if(dropItem.DropzoneIdentifier.Equals("ComicBook"))
			return;

		dropItem.Item!.Identifier = dropItem.DropzoneIdentifier;
		var isAddedToGroup = ComicBookService!.AddToGroup(int.Parse(dropItem.DropzoneIdentifier), dropItem.Item!.ComicBook.Id);
		if(isAddedToGroup)
			LoadGroups();
		else
			Snackbar!.Add("Error adding comic to group", Severity.Error);
	}

	public class DropItem
	{
		public ComicBook ComicBook { get; init; }
		public string Identifier { get; set; }
	}
}
