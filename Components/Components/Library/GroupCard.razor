@using Zine.App
@using Zine.App.Domain.Group
@using Zine.App.Exceptions

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<ConfirmGroupDeleteDialog @ref="_confirmGroupDeleteDialog" GroupName="@Group.Name"/>

<MudMenu @ref="_menuRef" id="@($"Menu-G-{Group.Id}")" ActivationEvent="MouseEvent.RightClick" PositionAtCursor Disabled="ContextMenuDisabled">
	<ActivatorContent>
		<MudItem>
			<div class="md:w-60 md:max-w-60 max-w-44">
				<MudPaper class="bg-[rgba(39,39,47,1)] p-3.5 rounded-lg">
					<MudGrid Spacing="2">

						@* Display the covers of the first 4 comicbooks in the group.
						If fewer covers are present, display as many as posible *@
						@foreach (var imageIndex in Enumerable.Range(0, 4).ToList())
						{
							<MudItem sm="6" class="flex items-center justify-center">
								<MudPaper class="h-group-card w-full rounded-lg">
									@if (Group.ComicBooks.Count > imageIndex)
									{
										<MudImage Src="@GetCoverImage(imageIndex)" Elevation="25" Class="rounded-lg h-group-card" />
									}
								</MudPaper>
							</MudItem>
						}

					</MudGrid>
					@if (_renaming)
					{
					<MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
						<MudTextField
							@bind-Value="@_renamingGroupName"
							class="h-full"
							Label="Group name..."
							Variant="Variant.Outlined"
							@onkeyup="HandleRenameKeypress"
						/>
					</MudFocusTrap>
					}
					else
					{
						<p class="font-medium text-center line-clamp-3 pt-3.5">@Group.Name</p>

					}
				</MudPaper>
			</div>
		</MudItem>
	</ActivatorContent>

	<ChildContent>
		@* Rename group *@
		<MudMenuItem Icon="@Icons.Material.Outlined.DriveFileRenameOutline" OnClick="StartRenamingGroup">Rename</MudMenuItem>

		@* Add group to another group *@
		<MudMenu ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft">
			<ActivatorContent>
				<MudMenuItem Disabled="Groups.All(g => g.Id == Group.Id)" Icon="@Icons.Material.Filled.Folder">
					Add To Group
					<MudIcon Icon="@Icons.Material.Filled.ChevronRight" />
				</MudMenuItem>
			</ActivatorContent>
			<ChildContent>
				@foreach (var group in Groups.Where(g => g.Id != Group.Id))
				{
					<MudMenuItem OnClick="() => AddToGroup(group.Id)">@group.Name</MudMenuItem>
				}
			</ChildContent>
		</MudMenu>

		@* Remove group  from current group *@
		<MudMenuItem Icon="@Icons.Material.Filled.FolderDelete" OnClick="RemoveFromGroup" Disabled="Group.ParentGroupId == AppConstants.MainGroupId">Remove from group</MudMenuItem>

		@* Delete group *@
		<MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="DeleteGroup">Delete group</MudMenuItem>
	</ChildContent>
</MudMenu>

@code {
	[Parameter]
	public bool ContextMenuDisabled { get; set; } = false;

	[Parameter]
	public required Group Group { get; set; }

	[Parameter]
	public required IEnumerable<Group> Groups { get; set; }

	[Parameter]
	public EventCallback UpdatedGroup { get; set; }

	[Parameter]
	public IGroupService GroupService { get; set; } = null!;

	[Parameter]
	public EventCallback<bool> EditStateChanged { get; set; }

	private bool _renaming = false;
	private string _renamingGroupName = "";

	private MudMenu _menuRef = null!;
	private DotNetObjectReference<GroupCard> _currentComponentRef = null!;
	private ConfirmGroupDeleteDialog _confirmGroupDeleteDialog = null!;

	private int _updateCount = 0;

	void StartRenamingGroup()
	{
		_renaming = true;
		_renamingGroupName = Group.Name;
		EditStateChanged.InvokeAsync(true);
	}

	async Task ConfirmRenamingGroup()
	{
		_renaming = false;
		await EditStateChanged.InvokeAsync(false);

		if(Group.Name.Equals(_renamingGroupName))
			return;

		try
		{
			GroupService.Rename(Group.Id, _renamingGroupName);
			await UpdatedGroup.InvokeAsync();
			Snackbar.Add("Successfully renamed group", Severity.Success);
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, Severity.Warning);
		}
	}

	void AddToGroup(int groupId)
	{
		try
		{
			GroupService.AddToGroup(groupId, Group.Id);
			UpdatedGroup.InvokeAsync(groupId);
			_menuRef.CloseMenuAsync();
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}
		catch (Exception)
		{
			Snackbar.Add("Error adding group to group", Severity.Error);
		}
	}

	void RemoveFromGroup()
	{
		if(Group.ParentGroupId == null)
			return;

		try
		{
			GroupService.AddToGroup(Group.ParentGroup!.ParentGroupId!.Value, Group.Id);
			UpdatedGroup.InvokeAsync(Group.ParentGroupId.Value);
			_menuRef.CloseMenuAsync();
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}
		catch (Exception)
		{
			Snackbar.Add("Error removing from group", Severity.Error);
		}
	}

	async Task DeleteGroup()
	{
		var deleteDialogResult = await _confirmGroupDeleteDialog.ShowDialogAsync();

		if(!deleteDialogResult.Confirmed) return;

		try
		{
			GroupService.Delete(Group.Id, deleteDialogResult.DeleteAllContent);
			await UpdatedGroup.InvokeAsync();
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}
		catch (Exception)
		{
			Snackbar.Add("Error deleting group", Severity.Error);
		}
	}



	string GetCoverImage(int comicBookIndex)
	{
		return comicBookIndex < Group.ComicBooks.Count
			? Group.ComicBooks.ToArray()[comicBookIndex].Information.SavedCoverImageFullPath.Replace("wwwroot", "")
			: "";
	}


	async Task HandleRenameKeypress(KeyboardEventArgs eventArgs)
	{
		if (eventArgs.Key.Equals("Enter"))
			await ConfirmRenamingGroup();
	}

	[JSInvokable]
	public void HandleClickOutside()
	{
		_menuRef.CloseMenuAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_currentComponentRef = DotNetObjectReference.Create(this);
			await JsRuntime.InvokeAsync<IJSObjectReference>("JsFunctions.registerClickOutsideHandler", $"Menu-G-{Group.Id}", _currentComponentRef);
		}
	}

	public void Dispose()
	{
		_currentComponentRef.Dispose();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		_updateCount++;
	}

}
