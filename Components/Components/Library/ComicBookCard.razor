@using Zine.App
@using Zine.App.Domain.ComicBook
@using Zine.App.Domain.Group
@using Zine.App.Enums

@inject IJSRuntime JsRuntime
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudMenu @ref="_menuRef" Id="@($"Menu-{ComicBook.Id}")" ActivationEvent="MouseEvent.RightClick" PositionAtCursor Disabled="_renaming">
	<ActivatorContent>
		<MudItem Class="h-full">

			@* Overlay when dargging *@
			<div class="overlay hidden absolute inset-0 bg-white opacity-15 w-[107%] -left-[3.5%] h-[103.8%] -top-[2%] rounded-2xl"></div>

			<div class="md:w-60 w-44 hover:cursor-pointer">
				@if (!ComicBook.Information.MovedOrDeleted)
				{
					<MudImage Src="@GetCoverImage()" Elevation="25" Class="cover-image rounded-lg h-full" />
				}
				else
				{
					<MudPaper class="cover-image h-[391px] w-full rounded-lg flex items-center justify-center flex-col gap-3">
						<MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Primary" Size="Size.Large" />
						Moved / Deleted
					</MudPaper>
				}
				@if (_renaming)
				{
					<MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
						<MudTextField
							@bind-Value="@_renamingComicBookName"
							class="h-full"
							Label="Comic book name..."
							Variant="Variant.Outlined"
							@onkeyup="HandleRenameKeypress" />
					</MudFocusTrap>
				}
				else
				{
					<p class="pt-2 font-lg text-center line-clamp-3">@ComicBook.Name</p>
				}
			</div>
		</MudItem>
	</ActivatorContent>

	<ChildContent>
		@* Rename comic book *@
		<MudMenuItem Icon="@Icons.Material.Outlined.DriveFileRenameOutline" Disabled="IsComicMovedOrDeleted" OnClick="StartRenamingComicBook">Rename</MudMenuItem>

		@* Add comic book to a group *@
		<MudMenu ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft" Disabled="IsComicMovedOrDeleted" Dense>
			<ActivatorContent>
				<MudMenuItem Disabled="IsComicMovedOrDeleted" Icon="@Icons.Material.Filled.Folder">
					Add To Group
					<MudIcon Icon="@Icons.Material.Filled.ChevronRight" />
				</MudMenuItem>
			</ActivatorContent>
			<ChildContent>
				@foreach (var group in Groups)
				{
					<MudMenuItem OnClick="() => AddToGroup(group.Id)">@group.Name</MudMenuItem>
				}
			</ChildContent>
		</MudMenu>

		@* Remove comic book from current group *@
		<MudMenuItem Icon="@Icons.Material.Filled.FolderDelete" OnClick="RemoveFromGroup" Disabled="ComicBook.GroupId == AppConstants.MainGroupId || IsComicMovedOrDeleted">Remove from group</MudMenuItem>

		@* Delete comic book *@
		<MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="DeleteComicBook">Delete comic book</MudMenuItem>
	</ChildContent>
</MudMenu>


@code {
	[Parameter]
	public bool ContextMenuDisabled { get; set; } = false;

	[Parameter]
	public required ComicBook ComicBook { get; set; }

	[Parameter]
    public required IEnumerable<Group> Groups { get; set; }

	[Parameter]
	public EventCallback UpdatedComicBook { get; set; }

	[Parameter]
	public IGroupService GroupService { get; set; } = null!;

	[Parameter]
	public IComicBookService ComicBookService { get; set; } = null!;

	[Parameter]
	public EventCallback<bool> EditStateChanged { get; set; }

	MudMenu _menuRef = null!;
	DotNetObjectReference<ComicBookCard> _currentComponentRef = null!;

	bool IsComicMovedOrDeleted => _renaming || ComicBook.Information.MovedOrDeleted;

	bool _renaming = false;
	string _renamingComicBookName = "";

	void StartRenamingComicBook()
	{
		_renaming = true;
		_renamingComicBookName = ComicBook.Name;
		EditStateChanged.InvokeAsync(true);
	}

	async Task ConfirmRenamingComicBook()
	{
		_renaming = false;

		if(ComicBook.Name.Equals(_renamingComicBookName))
			return;

		var renameSuccessful = ComicBookService.Rename(ComicBook.Id, _renamingComicBookName);
		if (renameSuccessful)
		{
			await EditStateChanged.InvokeAsync(false);
			await UpdatedComicBook.InvokeAsync();
			Snackbar.Add("Successfully renamed comic book", Severity.Success);
		}
		else
		{
			Snackbar.Add("Error renaming comic book", Severity.Warning);
		}
	}

	void AddToGroup(int groupId)
	{
		var isAddedToGroup = ComicBookService.AddToGroup(groupId, ComicBook.Id);
		if (isAddedToGroup)
		{
			UpdatedComicBook.InvokeAsync();
			_menuRef.CloseMenuAsync();
		} else
			Snackbar.Add("Error adding comic to group", Severity.Error);
	}

	void RemoveFromGroup()
	{
		var comicBookParentGroup = GroupService.GetById(ComicBook.GroupId);
		if (comicBookParentGroup!.ParentGroupId != null)
		{
			AddToGroup(comicBookParentGroup.ParentGroupId!.Value);
		}
	}

	async void DeleteComicBook()
	{
		var confirmed = await DialogService.ShowMessageBox(
			"Warning",
			(MarkupString)$"Are you sure you want to delete the following comic book: <br /> {ComicBook.Name}",
			yesText: "Confirm", noText: "Cancel");

		if (!confirmed!.Value) return;

		ComicBookService.Delete(ComicBook.Id);
		await UpdatedComicBook.InvokeAsync();
	}





	string GetCoverImage()
	{
		return Path.Join(DataPath.ComicBookCoverDirectory, ComicBook.Information.CoverImage).Replace("wwwroot", "");
	}

	private void HandleRenameKeypress(KeyboardEventArgs eventArgs)
	{
		if (eventArgs.Key.Equals("Enter"))
			ConfirmRenamingComicBook();
	}

	[JSInvokable]
	public void HandleClickOutside()
	{
		_menuRef.CloseMenuAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_currentComponentRef = DotNetObjectReference.Create(this);
			await JsRuntime.InvokeAsync<IJSObjectReference>("JsFunctions.registerClickOutsideHandler", $"Menu-{ComicBook.Id}", _currentComponentRef);
		}
	}

	public void Dispose()
	{
		_currentComponentRef.Dispose();
	}

}
