@using Zine.App.Domain.ComicBook
@using Zine.App.Domain.Person
@using Zine.App.Exceptions
@using Zine.App.Pages.Library

@implements IDisposable

@inject ReadingPageEventBus EventBus
@inject IComicBookService ComicBookService
@inject IPersonService PersonService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime


<MudDrawer
	Open="Open"
	Anchor="Anchor.Right"
	Elevation="1"
	Variant="@DrawerVariant.Temporary"
	OpenChanged="HandleOpenStateChanged"
	Class="!w-fit max-w-1/3"
>

	<MudDrawerHeader>
		<span class="w-full text-center text-xl text-white mt-5">
			Information
			@if (!_editMode)
			{
				<MudIcon
					Icon="@Icons.Material.Filled.Edit"
					Class="h-5 hover:fill-primary cursor-pointer mb-1"
					@onclick="EnableEditMode"
				/>
			}
			else
			{
				<MudIcon
					Icon="@Icons.Material.Filled.Check"
					Class="h-5 hover:fill-primary cursor-pointer mb-1"
					@onclick="SaveChanges"
				/>
			}

		</span>
	</MudDrawerHeader>

	@if (Open && ComicBook != null)
	{
		<MudDrawerContainer Class="p-5">
			<table class="table-auto">
				@* ReSharper disable once Asp.Entity *@
				<tbody class="[&_th]:p-3 [&_th]:text-left [&_td]:p-3">

				<tr>
					<th>Title</th>
					<td>@ComicBook.Title</td>
				</tr>

				<tr>
					<th>Pages</th>
					<td>@ComicBook.Pages.Count</td>
				</tr>

				<tr>
					<th>Drawn by</th>
					<td>
						<ChipMultiSelect
							@bind-SelectedValues="ComicBook.Information.People"
							Label="Select a value..."
							ShowInput="_editMode"
							RowToString="@Person_ToString"
							SearchFunc="@((searchTerm, cancellationToken) => Person_SearchByRole(searchTerm, cancellationToken, Role.Drawer))"
							ChipFilterFunc="@(people => Person_ChipFilterFunc(people, Role.Drawer))"
							OnCreate="@((name) => Person_Create(name, Role.Drawer))"
							OnDelete="@DeletePerson"
						/>
					</td>
				</tr>

				<tr>
					<th>Colored by</th>
					<td>
						<ChipMultiSelect
							@bind-SelectedValues="ComicBook.Information.People"
							Label="Select a value..."
							ShowInput="_editMode"
							RowToString="@Person_ToString"
							SearchFunc="@((searchTerm, cancellationToken) => Person_SearchByRole(searchTerm, cancellationToken, Role.Colorist))"
							ChipFilterFunc="@(people => Person_ChipFilterFunc(people, Role.Colorist))"
							OnCreate="@((name) => Person_Create(name, Role.Colorist))"
							OnDelete="@DeletePerson"
						/>
					</td>
				</tr>

				<tr>
					<th>Written by</th>
					<td>
						<ChipMultiSelect
							@bind-SelectedValues="ComicBook.Information.People"
							Label="Select a value..."
							ShowInput="_editMode"
							RowToString="@Person_ToString"
							SearchFunc="@((searchTerm, cancellationToken) => Person_SearchByRole(searchTerm, cancellationToken, Role.Writer))"
							ChipFilterFunc="@(people => Person_ChipFilterFunc(people, Role.Writer))"
							OnCreate="@((name) => Person_Create(name, Role.Writer))"
							OnDelete="@DeletePerson"
						/>
					</td>
				</tr>

				<tr>
					<th>Edited by</th>
					<td>
						<ChipMultiSelect
							@bind-SelectedValues="ComicBook.Information.People"
							Label="Select a value..."
							ShowInput="_editMode"
							RowToString="@Person_ToString"
							SearchFunc="@((searchTerm, cancellationToken) => Person_SearchByRole(searchTerm, cancellationToken, Role.Editor))"
							ChipFilterFunc="@(people => Person_ChipFilterFunc(people, Role.Editor))"
							OnCreate="@((name) => Person_Create(name, Role.Editor))"
							OnDelete="@DeletePerson"
						/>
					</td>
				</tr>

				<tr>
					<th>Published by</th>
					<td class="text-red-600">TODO</td>
				</tr>

				<tr>
					<th>Tags</th>
					<td class="text-red-600">TODO</td>
				</tr>

				<tr>
					<th>Series</th>
					<td class="text-red-600">TODO</td>
				</tr>

				<tr>
					<th>Issue #</th>
					<td class="text-red-600">TODO</td>
				</tr>

				<tr>
					<th>Release date</th>
					<td class="text-red-600">TODO</td>
				</tr>

				</tbody>
			</table>
		</MudDrawerContainer>
	}
</MudDrawer>

@code {
	private bool _open;
	private bool _editMode = false;

	public bool Open
	{
		get => _open;
		set
		{
			if (value)
				DisableBodyScroll();
			else
			{
				DisableEditMode();
				EnableBodyScroll();
			}

			_open = value;
		}
	}

	private Action? _unsubscribe = null;

	private ComicBook? ComicBook { get; set; }

	private void OpenDrawer(int comicBookId)
	{
		Open = true;
		LoadComic(comicBookId);
		StateHasChanged();
	}

	private void HandleOpenStateChanged(bool isOpen)
	{
		if (isOpen)
			return;

		Open = false;
	}

	private void EnableEditMode()
	{
		_editMode = true;
	}

	private void DisableEditMode()
	{
		_editMode = false;
	}


	private void LoadComic(int comicBookId)
	{
		try
		{
			var comicBook = ComicBookService.GetForInformationDrawer(comicBookId);
			ComicBook = comicBook;
		}
		catch (Exception)
		{
			Snackbar.Add("Could not find comic book", Severity.Error);
			Open = false;
		}
	}

	private string Person_ToString(Person? person)
	{
		return person?.Name ?? "";
	}

	private void Person_Create(string name, Role role)
	{
		try
		{
			var createdPerson = PersonService.Create(name, role);
			ComicBook!.Information.People.Add(createdPerson);
			Snackbar.Add($"Successfully created: {createdPerson.Name}", Severity.Success);
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}
	}

	private IEnumerable<Person> Person_SearchByRole(string? searchTerm, CancellationToken cancellationToken, Role role)
	{
		return PersonService.Search(searchTerm, role);
	}

	private IEnumerable<Person> Person_ChipFilterFunc(IEnumerable<Person> people, Role role)
	{
		return people.Where(p => p.Role == role);
	}

	private void SaveChanges()
	{
		ComicBook = ComicBookService.Update(ComicBook!);

		DisableEditMode();
	}

	private void DeletePerson(Person person)
	{
		try
		{
			PersonService.Delete(person);

			Snackbar.Add($"Successfully deleted: {person.Name}", Severity.Success);
		}
		catch (HandledAppException e)
		{
			Snackbar.Add(e.Message, e.Severity);
		}
	}


	private void EnableBodyScroll()
	{
		JsRuntime.InvokeVoidAsync("document.body.classList.remove", "overflow-hidden");
	}

	private void DisableBodyScroll()
	{
		JsRuntime.InvokeVoidAsync("document.body.classList.add", "overflow-hidden");
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
			_unsubscribe = EventBus.Subscribe<int>(EventName.OpenInfoDrawer, OpenDrawer);
	}


	public void Dispose()
	{
		_unsubscribe?.Invoke();
		// ComicBook = null;
	}

}
