@using Zine.App.Domain.ComicBook.Reading
@using Zine.App.Domain.ComicBookPageInformation
@using Page = Zine.App.Domain.ComicBook.Reading.Page

@inject IJSRuntime JsRuntime

<script src="js/slideReorder.js"></script>

<div class="drop-container">
	<div class="flex flex-col gap-2 m-2">
		@foreach (var page in Pages)
		{
			<div>
				<div class="mb-0.5">
					@if (page.PageInformation.PageType == PageType.Double)
					{
						<span>@(page.PageNumberStart) - @(page.PageNumberEnd)</span>
					}
					else
					{
						<span>@(page.PageNumberStart)</span>
					}
				</div>
				<div
					id="@(page.PageInformation.Id)"
					@key="page.PageInformation.Id"
					@ref="_elementRefs[page.PageInformation.Id]"
					draggable="true"
					tabindex="1"
					@ondrag="@(() => ItemDragStart(page))"
					@ondragenter="@(() => ItemDragEnter(page))">
					<MudImage Src="@(page.Image)" />
				</div>
			</div>
		}
	</div>
</div>

@code {

	[Parameter]
	public List<Page> Pages { get; set; } = [];

	[Parameter]
    public EventCallback<List<Page>> PagesChanged { get; set; }

	private int _currentlyDraggedIndex = -1;

	private bool CurrentlyDraggingItem => _currentlyDraggedIndex != -1;

	private Dictionary<int, ElementReference> _elementRefs = new();

	void ItemDragStart(Page dropItem)
	{
		_currentlyDraggedIndex = GetIndex(dropItem);
	}

	async Task ItemDragEnter(Page hoveredItem)
	{
		if (!CurrentlyDraggingItem)
			return;

		int hoveredIndex = GetIndex(hoveredItem);
		if (hoveredIndex == _currentlyDraggedIndex)
			return;

		var draggedItem = Pages[_currentlyDraggedIndex];

		// Animate current and hovered items
		var draggedRef = _elementRefs[draggedItem.PageInformation.Id];
		var hoveredRef = _elementRefs[hoveredItem.PageInformation.Id];
		await JsRuntime.InvokeVoidAsync("reorder.animateSwapTwoImages", draggedRef, hoveredRef);

		// Swap them in the displayed list
		Pages[_currentlyDraggedIndex] = hoveredItem;
		Pages[hoveredIndex] = draggedItem;

		// Update their indexes
		Pages[_currentlyDraggedIndex].PageInformation.Index = _currentlyDraggedIndex;
		Pages[hoveredIndex].PageInformation.Index = hoveredIndex;

		_currentlyDraggedIndex = hoveredIndex;

		Pages = ReadingPageHandler.CreatePageInfo(Pages.Select(p => p.PageInformation));

		await PagesChanged.InvokeAsync(Pages);
	}


	int GetIndex(Page item)
	{
		return Pages.FindIndex(p => p.PageInformation.Id == item.PageInformation.Id);
	}
}
